{
	"info": {
		"_postman_id": "9a545c61-2c76-4129-9901-48185994e208",
		"name": "Pintu Tech Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30825169"
	},
	"item": [
		{
			"name": "List All Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Key userId is an integer\", function () {\r",
							"    pm.response.json().forEach(function(post) {\r",
							"        pm.expect(post.userId).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Key id is an integer\", function () {\r",
							"    pm.response.json().forEach(function(post) {\r",
							"        pm.expect(post.id).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Key title is a string\", function () {\r",
							"    pm.response.json().forEach(function(post) {\r",
							"        pm.expect(post.title).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Key body is a string\", function () {\r",
							"    pm.response.json().forEach(function(post) {\r",
							"        pm.expect(post.body).to.be.a('string');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Creating a Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"resource_id\", jsonData.id);\r",
							"\r",
							"pm.test('Status code is 201', function () {\r",
							"    pm.response.to.have.status(201);\r",
							"})\r",
							"\r",
							"pm.test('Response time is less than 500ms', function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"})\r",
							"\r",
							"pm.test('Key id is an integer', function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Key title is a string', function () {\r",
							"    pm.expect(pm.response.json().title).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test('Key body is a string', function () {\r",
							"    pm.expect(pm.response.json().body).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test('Key userId is 23', function () {\r",
							"    pm.expect(pm.response.json().userId).to.equal(23);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Didit Setiawan\",\r\n    \"body\": \"This is a test from Didit Setiawan\",\r\n    \"userId\": 23\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting a Resource",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var res_id = (pm.environment.get(\"resource_id\")-1)\r",
							"pm.environment.set('resource_id', res_id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test('Key userId is an integer', function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Key id is an integer', function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Key title is a string', function () {\r",
							"    pm.expect(pm.response.json().title).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test('Key body is a string', function () {\r",
							"    pm.expect(pm.response.json().body).to.be.a('string');\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{resource_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Updating a Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test('Key id is an integer', function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Key title is a string', function () {\r",
							"    pm.expect(pm.response.json().title).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test('Key body is a string', function () {\r",
							"    pm.expect(pm.response.json().body).to.be.a('string');\r",
							"})\r",
							"\r",
							"pm.test('Key userId is 23', function () {\r",
							"    pm.expect(pm.response.json().userId).to.equal(23);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{resource_id}}\",\r\n    \"title\": \"Didit Setiawan\",\r\n    \"body\": \"This is a test from Didit Setiawan\",\r\n    \"userId\": 23\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{resource_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch a Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var res_id = pm.environment.get('resource_id')\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test('Key id is an integer', function () {\r",
							"    pm.expect(pm.response.json().id).to.be.a('number');\r",
							"})\r",
							"\r",
							"pm.test('Key id is '+res_id, function () {\r",
							"    pm.expect(pm.response.json().id).to.equal(res_id);\r",
							"});\r",
							"\r",
							"pm.test(\"Value on key 'title' contains a string\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.title).to.be.a('string').and.to.include('PATCH BY DIDIT SETIAWAN');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"PATCH BY DIDIT SETIAWAN\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/posts/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{resource_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/posts/:id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"posts",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{resource_id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}